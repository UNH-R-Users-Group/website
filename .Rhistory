V(g)$size <- node_sizes[V(g)$name]
# Define custom layout positions for the "V" shape, making the nodes twice as close together
layout_matrix <- matrix(c(
0, 1.25,  # Predators at the top (apex), moved closer to the center
-0.5, 0.75, # Herbivores on the left, moved closer
0.5, 0.75,  # Filter Feeders on the right, moved closer
-0.75, 0.25, # Algae at the bottom left, moved closer
0.75, 0.25   # Plankton at the bottom right, moved closer
), ncol = 2, byrow = TRUE)
# Reorder the layout matrix to match the order of nodes
layout_matrix <- layout_matrix[match(V(g)$name, c("Predators", "Herbivores", "FilterFeeders", "Algae", "Plankton")), ]
# Create a ggraph plot with the custom layout
ggraph(g, layout = layout_matrix) +
geom_edge_link(aes(start_cap = label_rect(node1.name), end_cap = label_rect(node2.name)),
arrow = arrow(length = unit(2, 'mm')), end_cap = circle(3, 'mm')) +  # Arrow length is halved to 2mm
geom_node_point(aes(size = size), color = "blue") +
geom_node_text(aes(label = name), vjust = 1.8, hjust = 1.5, color = "black") +
theme_void() +
scale_size_continuous(range = c(1, 20)) +  # Adjust the range of bubble sizes to fit the smaller scale
theme(plot.margin = unit(c(1, 1, 1, 1), "cm"))  # Add margins to the plot
library(igraph)
library(ggraph)
library(ggplot2)
# Define the interactions
interactions <- data.frame(
prey = c("Algae", "Plankton", "Herbivores", "FilterFeeders"),
predator = c("Herbivores", "FilterFeeders", "Predators", "Predators")
)
# Create a directed graph from the interaction data
g <- graph_from_data_frame(interactions, directed = TRUE)
# Assign specific sizes to each node and scale them down
scale_factor <- 1  # Scaling factor for node sizes
node_sizes <- c(Algae = 95, Herbivores = 11, Predators = 31, Plankton = 100, FilterFeeders = 52) * scale_factor
# Match sizes to the vertices in the graph
V(g)$size <- node_sizes[V(g)$name]
# Define custom layout positions for the "V" shape, making the nodes twice as close together
layout_matrix <- matrix(c(
0, 1.25,  # Predators at the top (apex), moved closer to the center
-0.5, 0.75, # Herbivores on the left, moved closer
0.5, 0.75,  # Filter Feeders on the right, moved closer
-0.75, 0.25, # Algae at the bottom left, moved closer
0.75, 0.25   # Plankton at the bottom right, moved closer
), ncol = 2, byrow = TRUE)
# Reorder the layout matrix to match the order of nodes
layout_matrix <- layout_matrix[match(V(g)$name, c("Predators", "Herbivores", "FilterFeeders", "Algae", "Plankton")), ]
# Create a ggraph plot with the custom layout
ggraph(g, layout = layout_matrix) +
geom_edge_link(aes(start_cap = label_rect(node1.name), end_cap = label_rect(node2.name)),
arrow = arrow(length = unit(2, 'mm')), end_cap = circle(6, 'mm')) +  # Arrow length is halved to 2mm
geom_node_point(aes(size = size), color = "blue") +
geom_node_text(aes(label = name), vjust = 1.8, hjust = 1.5, color = "black") +
theme_void() +
scale_size_continuous(range = c(1, 20)) +  # Adjust the range of bubble sizes to fit the smaller scale
theme(plot.margin = unit(c(1, 1, 1, 1), "cm"))  # Add margins to the plot
library(igraph)
library(ggraph)
library(ggplot2)
# Define the interactions
interactions <- data.frame(
prey = c("Algae", "Plankton", "Herbivores", "FilterFeeders"),
predator = c("Herbivores", "FilterFeeders", "Predators", "Predators")
)
# Create a directed graph from the interaction data
g <- graph_from_data_frame(interactions, directed = TRUE)
# Assign specific sizes to each node and scale them down
scale_factor <- 1  # Scaling factor for node sizes
node_sizes <- c(Algae = 95, Herbivores = 11, Predators = 31, Plankton = 100, FilterFeeders = 52) * scale_factor
# Match sizes to the vertices in the graph
V(g)$size <- node_sizes[V(g)$name]
# Define custom layout positions for the "V" shape, making the nodes twice as close together
layout_matrix <- matrix(c(
0, 1.25,  # Predators at the top (apex), moved closer to the center
-0.5, 0.75, # Herbivores on the left, moved closer
0.5, 0.75,  # Filter Feeders on the right, moved closer
-0.5, 0.25, # Algae at the bottom left, moved closer
0.75, 0.25   # Plankton at the bottom right, moved closer
), ncol = 2, byrow = TRUE)
# Reorder the layout matrix to match the order of nodes
layout_matrix <- layout_matrix[match(V(g)$name, c("Predators", "Herbivores", "FilterFeeders", "Algae", "Plankton")), ]
# Create a ggraph plot with the custom layout
ggraph(g, layout = layout_matrix) +
geom_edge_link(aes(start_cap = label_rect(node1.name), end_cap = label_rect(node2.name)),
arrow = arrow(length = unit(2, 'mm')), end_cap = circle(6, 'mm')) +  # Arrow length is halved to 2mm
geom_node_point(aes(size = size), color = "blue") +
geom_node_text(aes(label = name), vjust = 1.8, hjust = 1.5, color = "black") +
theme_void() +
scale_size_continuous(range = c(1, 20)) +  # Adjust the range of bubble sizes to fit the smaller scale
theme(plot.margin = unit(c(1, 1, 1, 1), "cm"))  # Add margins to the plot
library(igraph)
library(ggraph)
library(ggplot2)
# Define the interactions
interactions <- data.frame(
prey = c("Algae", "Plankton", "Herbivores", "FilterFeeders"),
predator = c("Herbivores", "FilterFeeders", "Predators", "Predators")
)
# Create a directed graph from the interaction data
g <- graph_from_data_frame(interactions, directed = TRUE)
# Assign specific sizes to each node and scale them down
scale_factor <- 1  # Scaling factor for node sizes
node_sizes <- c(Algae = 95, Herbivores = 11, Predators = 31, Plankton = 100, FilterFeeders = 52) * scale_factor
# Match sizes to the vertices in the graph
V(g)$size <- node_sizes[V(g)$name]
# Define custom layout positions for the "V" shape, making the nodes twice as close together
layout_matrix <- matrix(c(
0, 1.25,  # Predators at the top (apex), moved closer to the center
-0.5, 0.75, # Herbivores on the left, moved closer
0.5, 0.75,  # Filter Feeders on the right, moved closer
-0.75, 0.25, # Algae at the bottom left, moved closer
0.75, 0.25   # Plankton at the bottom right, moved closer
), ncol = 2, byrow = TRUE)
# Reorder the layout matrix to match the order of nodes
layout_matrix <- layout_matrix[match(V(g)$name, c("Predators", "Herbivores", "FilterFeeders", "Algae", "Plankton")), ]
# Create a ggraph plot with the custom layout
ggraph(g, layout = layout_matrix) +
geom_edge_link(aes(start_cap = label_rect(node1.name), end_cap = label_rect(node2.name)),
arrow = arrow(length = unit(2, 'mm')), end_cap = circle(6, 'mm')) +  # Arrow length is halved to 2mm
geom_node_point(aes(size = size), color = "blue") +
geom_node_text(aes(label = name), vjust = 1.8, hjust = 1.5, color = "black") +
theme_void() +
scale_size_continuous(range = c(1, 20)) +  # Adjust the range of bubble sizes to fit the smaller scale
theme(plot.margin = unit(c(1, 1, 1, 1), "cm"))  # Add margins to the plot
library(igraph)
library(ggraph)
library(ggplot2)
# Define the interactions
interactions <- data.frame(
prey = c("Algae", "Plankton", "Herbivores", "FilterFeeders"),
predator = c("Herbivores", "FilterFeeders", "Predators", "Predators")
)
# Create a directed graph from the interaction data
g <- graph_from_data_frame(interactions, directed = TRUE)
# Assign specific sizes to each node and scale them down
scale_factor <- 1  # Scaling factor for node sizes
node_sizes <- c(Algae = 95, Herbivores = 11, Predators = 31, Plankton = 100, FilterFeeders = 52) * scale_factor
# Match sizes to the vertices in the graph
V(g)$size <- node_sizes[V(g)$name]
# Define custom layout positions for the "V" shape, making the nodes twice as close together
layout_matrix <- matrix(c(
0, 1.25,  # Predators at the top (apex), moved closer to the center
-0.5, 0.75, # Herbivores on the left, moved closer
0.5, 0.75,  # Filter Feeders on the right, moved closer
-0.75, 0.5, # Algae at the bottom left, moved closer
0.75, 0.25   # Plankton at the bottom right, moved closer
), ncol = 2, byrow = TRUE)
# Reorder the layout matrix to match the order of nodes
layout_matrix <- layout_matrix[match(V(g)$name, c("Predators", "Herbivores", "FilterFeeders", "Algae", "Plankton")), ]
# Create a ggraph plot with the custom layout
ggraph(g, layout = layout_matrix) +
geom_edge_link(aes(start_cap = label_rect(node1.name), end_cap = label_rect(node2.name)),
arrow = arrow(length = unit(2, 'mm')), end_cap = circle(6, 'mm')) +  # Arrow length is halved to 2mm
geom_node_point(aes(size = size), color = "blue") +
geom_node_text(aes(label = name), vjust = 1.8, hjust = 1.5, color = "black") +
theme_void() +
scale_size_continuous(range = c(1, 20)) +  # Adjust the range of bubble sizes to fit the smaller scale
theme(plot.margin = unit(c(1, 1, 1, 1), "cm"))  # Add margins to the plot
library(igraph)
library(ggraph)
library(ggplot2)
# Define the interactions
interactions <- data.frame(
prey = c("Algae", "Plankton", "Herbivores", "FilterFeeders"),
predator = c("Herbivores", "FilterFeeders", "Predators", "Predators")
)
# Create a directed graph from the interaction data
g <- graph_from_data_frame(interactions, directed = TRUE)
# Assign specific sizes to each node and scale them down
scale_factor <- 1  # Scaling factor for node sizes
node_sizes <- c(Algae = 95, Herbivores = 11, Predators = 31, Plankton = 100, FilterFeeders = 52) * scale_factor
# Match sizes to the vertices in the graph
V(g)$size <- node_sizes[V(g)$name]
# Define custom layout positions for the "V" shape, making the nodes twice as close together
layout_matrix <- matrix(c(
0, 1.25,  # Predators at the top (apex), moved closer to the center
-0.5, 0.75, # Herbivores on the left, moved closer
0.5, 0.75,  # Filter Feeders on the right, moved closer
-0.75, 0.5, # Algae at the bottom left, moved closer
0.75, 0.5   # Plankton at the bottom right, moved closer
), ncol = 2, byrow = TRUE)
# Reorder the layout matrix to match the order of nodes
layout_matrix <- layout_matrix[match(V(g)$name, c("Predators", "Herbivores", "FilterFeeders", "Algae", "Plankton")), ]
# Create a ggraph plot with the custom layout
ggraph(g, layout = layout_matrix) +
geom_edge_link(aes(start_cap = label_rect(node1.name), end_cap = label_rect(node2.name)),
arrow = arrow(length = unit(2, 'mm')), end_cap = circle(6, 'mm')) +  # Arrow length is halved to 2mm
geom_node_point(aes(size = size), color = "blue") +
geom_node_text(aes(label = name), vjust = 1.8, hjust = 1.5, color = "black") +
theme_void() +
scale_size_continuous(range = c(1, 20)) +  # Adjust the range of bubble sizes to fit the smaller scale
theme(plot.margin = unit(c(1, 1, 1, 1), "cm"))  # Add margins to the plot
library(igraph)
library(ggraph)
library(ggplot2)
# Define the interactions
interactions <- data.frame(
prey = c("Algae", "Plankton", "Herbivores", "FilterFeeders"),
predator = c("Herbivores", "FilterFeeders", "Predators", "Predators")
)
# Create a directed graph from the interaction data
g <- graph_from_data_frame(interactions, directed = TRUE)
# Assign specific sizes to each node and scale them down
scale_factor <- 1  # Scaling factor for node sizes
node_sizes <- c(Algae = 95, Herbivores = 11, Predators = 31, Plankton = 100, FilterFeeders = 52) * scale_factor
# Match sizes to the vertices in the graph
V(g)$size <- node_sizes[V(g)$name]
# Define custom layout positions for the "V" shape, making the nodes twice as close together
layout_matrix <- matrix(c(
0, 1,  # Predators at the top (apex), moved closer to the center
-0.5, 0.75, # Herbivores on the left, moved closer
0.5, 0.75,  # Filter Feeders on the right, moved closer
-0.75, 0.5, # Algae at the bottom left, moved closer
0.75, 0.5   # Plankton at the bottom right, moved closer
), ncol = 2, byrow = TRUE)
# Reorder the layout matrix to match the order of nodes
layout_matrix <- layout_matrix[match(V(g)$name, c("Predators", "Herbivores", "FilterFeeders", "Algae", "Plankton")), ]
# Create a ggraph plot with the custom layout
ggraph(g, layout = layout_matrix) +
geom_edge_link(aes(start_cap = label_rect(node1.name), end_cap = label_rect(node2.name)),
arrow = arrow(length = unit(2, 'mm')), end_cap = circle(6, 'mm')) +  # Arrow length is halved to 2mm
geom_node_point(aes(size = size), color = "blue") +
geom_node_text(aes(label = name), vjust = 1.8, hjust = 1.5, color = "black") +
theme_void() +
scale_size_continuous(range = c(1, 20)) +  # Adjust the range of bubble sizes to fit the smaller scale
theme(plot.margin = unit(c(1, 1, 1, 1), "cm"))  # Add margins to the plot
library(igraph)
library(ggraph)
library(ggplot2)
# Define the interactions
interactions <- data.frame(
prey = c("Algae", "Plankton", "Herbivores", "FilterFeeders"),
predator = c("Herbivores", "FilterFeeders", "Predators", "Predators")
)
# Create a directed graph from the interaction data
g <- graph_from_data_frame(interactions, directed = TRUE)
# Assign specific sizes to each node and scale them down
scale_factor <- 1  # Scaling factor for node sizes
node_sizes <- c(Algae = 95, Herbivores = 11, Predators = 31, Plankton = 100, FilterFeeders = 52) * scale_factor
# Match sizes to the vertices in the graph
V(g)$size <- node_sizes[V(g)$name]
# Define custom layout positions for the "V" shape, making the nodes twice as close together
layout_matrix <- matrix(c(
0, 1,  # Predators at the top (apex), moved closer to the center
-0.5, 0.75, # Herbivores on the left, moved closer
0.5, 0.75,  # Filter Feeders on the right, moved closer
-0.75, 0.5, # Algae at the bottom left, moved closer
0.75, 0.5   # Plankton at the bottom right, moved closer
), ncol = 2, byrow = TRUE)
# Reorder the layout matrix to match the order of nodes
layout_matrix <- layout_matrix[match(V(g)$name, c("Predators", "Herbivores", "FilterFeeders", "Algae", "Plankton")), ]
# Create a ggraph plot with the custom layout
ggraph(g, layout = layout_matrix) +
geom_edge_link(aes(start_cap = label_rect(node1.name), end_cap = label_rect(node2.name)),
arrow = arrow(length = unit(2, 'mm')), end_cap = circle(6, 'mm')) +  # Arrow length is halved to 2mm
geom_node_point(aes(size = size), color = "lightblue") +
geom_node_text(aes(label = name), vjust = 1.8, hjust = 1.5, color = "black") +
theme_void() +
scale_size_continuous(range = c(5, 30)) +  # Adjust the range of bubble sizes to fit the smaller scale
theme(plot.margin = unit(c(1, 1, 1, 1), "cm"))  # Add margins to the plot
library(igraph)
library(ggraph)
library(ggplot2)
# Define the interactions
interactions <- data.frame(
prey = c("Algae", "Plankton", "Herbivores", "FilterFeeders"),
predator = c("Herbivores", "FilterFeeders", "Predators", "Predators")
)
# Create a directed graph from the interaction data
g <- graph_from_data_frame(interactions, directed = TRUE)
# Assign specific sizes to each node and scale them down
scale_factor <- 1  # Scaling factor for node sizes
node_sizes <- c(Algae = 95, Herbivores = 11, Predators = 31, Plankton = 100, FilterFeeders = 52) * scale_factor
# Match sizes to the vertices in the graph
V(g)$size <- node_sizes[V(g)$name]
# Define custom layout positions for the "V" shape, making the nodes twice as close together
layout_matrix <- matrix(c(
0, 1,  # Predators at the top (apex), moved closer to the center
-0.5, 0.75, # Herbivores on the left, moved closer
0.5, 0.75,  # Filter Feeders on the right, moved closer
-0.75, 0.5, # Algae at the bottom left, moved closer
0.75, 0.5   # Plankton at the bottom right, moved closer
), ncol = 2, byrow = TRUE)
# Reorder the layout matrix to match the order of nodes
layout_matrix <- layout_matrix[match(V(g)$name, c("Predators", "Herbivores", "FilterFeeders", "Algae", "Plankton")), ]
# Create a ggraph plot with the custom layout
ggraph(g, layout = layout_matrix) +
geom_edge_link(aes(start_cap = label_rect(node1.name), end_cap = label_rect(node2.name)),
arrow = arrow(length = unit(2, 'mm')), end_cap = circle(6, 'mm')) +  # Arrow length is halved to 2mm
geom_node_point(aes(size = size), color = "lightblue") +
geom_node_text(aes(label = name), vjust = 1.8, hjust = 1.5, color = "black") +
theme_void() +
scale_size_continuous(range = c(5, 30)) +  # Adjust the range of bubble sizes to fit the smaller scale
theme(plot.margin = unit(c(0, 0, 0, 0), "cm"))  # Add margins to the plot
library(igraph)
library(ggraph)
library(ggplot2)
# Define the interactions
interactions <- data.frame(
prey = c("Algae", "Plankton", "Herbivores", "FilterFeeders"),
predator = c("Herbivores", "FilterFeeders", "Predators", "Predators")
)
# Create a directed graph from the interaction data
g <- graph_from_data_frame(interactions, directed = TRUE)
# Assign specific sizes to each node and scale them down
scale_factor <- 1  # Scaling factor for node sizes
node_sizes <- c(Algae = 95, Herbivores = 11, Predators = 31, Plankton = 100, FilterFeeders = 52) * scale_factor
# Match sizes to the vertices in the graph
V(g)$size <- node_sizes[V(g)$name]
# Define custom layout positions for the "V" shape, making the nodes twice as close together
layout_matrix <- matrix(c(
0, 1,  # Predators at the top (apex), moved closer to the center
-0.5, 0.75, # Herbivores on the left, moved closer
0.5, 0.75,  # Filter Feeders on the right, moved closer
-0.75, 0.5, # Algae at the bottom left, moved closer
0.75, 0.5   # Plankton at the bottom right, moved closer
), ncol = 2, byrow = TRUE)
# Reorder the layout matrix to match the order of nodes
layout_matrix <- layout_matrix[match(V(g)$name, c("Predators", "Herbivores", "FilterFeeders", "Algae", "Plankton")), ]
# Create a ggraph plot with the custom layout
ggraph(g, layout = layout_matrix) +
geom_edge_link(aes(start_cap = label_rect(node1.name), end_cap = label_rect(node2.name)),
arrow = arrow(length = unit(2, 'mm')), end_cap = circle(6, 'mm')) +  # Arrow length is halved to 2mm
geom_node_point(aes(size = size), color = "lightblue") +
geom_node_text(aes(label = name), vjust = 1.8, hjust = 1.5, color = "black") +
theme_void() +
scale_size_continuous(range = c(5, 30)) +  # Adjust the range of bubble sizes to fit the smaller scale
theme(plot.margin = unit(c(1.5, 1.5, 1.5,1.5), "cm"))  # Add margins to the plot
library(igraph)
library(ggraph)
library(ggplot2)
# Define the interactions
interactions <- data.frame(
prey = c("Algae", "Plankton", "Herbivores", "FilterFeeders"),
predator = c("Herbivores", "FilterFeeders", "Predators", "Predators")
)
# Create a directed graph from the interaction data
g <- graph_from_data_frame(interactions, directed = TRUE)
# Assign specific sizes to each node and scale them down
scale_factor <- 0.8  # Scaling factor for node sizes, reduced for better fitting
node_sizes <- c(Algae = 95, Herbivores = 11, Predators = 31, Plankton = 100, FilterFeeders = 52) * scale_factor
# Match sizes to the vertices in the graph
V(g)$size <- node_sizes[V(g)$name]
# Define custom layout positions for the "V" shape, making the nodes closer but more centralized
layout_matrix <- matrix(c(
0, 1.5,  # Predators at the top (apex), adjusted closer to the center
-0.4, 1,  # Herbivores on the left, adjusted
0.4, 1,   # Filter Feeders on the right, adjusted
-0.6, 0.5, # Algae at the bottom left, adjusted
0.6, 0.5   # Plankton at the bottom right, adjusted
), ncol = 2, byrow = TRUE)
# Reorder the layout matrix to match the order of nodes
layout_matrix <- layout_matrix[match(V(g)$name, c("Predators", "Herbivores", "FilterFeeders", "Algae", "Plankton")), ]
# Create a ggraph plot with the custom layout
ggraph(g, layout = layout_matrix) +
geom_edge_link(aes(start_cap = label_rect(node1.name), end_cap = label_rect(node2.name)),
arrow = arrow(length = unit(2, 'mm')), end_cap = circle(6, 'mm')) +  # Arrow length is halved to 2mm
geom_node_point(aes(size = size), color = "lightblue") +
geom_node_text(aes(label = name), vjust = 1.8, hjust = 1.5, color = "black") +
theme_void() +
scale_size_continuous(range = c(5, 30)) +  # Adjust the range of bubble sizes to fit the smaller scale
theme(plot.margin = unit(c(2, 2, 2, 2), "cm"))  # Further increase margins to ensure everything fits
library(igraph)
library(ggraph)
library(ggplot2)
# Define the interactions
interactions <- data.frame(
prey = c("Algae", "Plankton", "Herbivores", "FilterFeeders"),
predator = c("Herbivores", "FilterFeeders", "Predators", "Predators")
)
# Create a directed graph from the interaction data
g <- graph_from_data_frame(interactions, directed = TRUE)
# Assign specific sizes to each node and scale them down
scale_factor <- 0.8  # Scaling factor for node sizes, reduced for better fitting
node_sizes <- c(Algae = 95, Herbivores = 11, Predators = 31, Plankton = 100, FilterFeeders = 52) * scale_factor
# Match sizes to the vertices in the graph
V(g)$size <- node_sizes[V(g)$name]
# Define custom layout positions for the "V" shape, making the nodes closer but more centralized
layout_matrix <- matrix(c(
0, 1.5,  # Predators at the top (apex), adjusted closer to the center
-0.4, 1,  # Herbivores on the left, adjusted
0.4, 1,   # Filter Feeders on the right, adjusted
-0.6, 0.5, # Algae at the bottom left, adjusted
0.6, 0.5   # Plankton at the bottom right, adjusted
), ncol = 2, byrow = TRUE)
# Reorder the layout matrix to match the order of nodes
layout_matrix <- layout_matrix[match(V(g)$name, c("Predators", "Herbivores", "FilterFeeders", "Algae", "Plankton")), ]
# Create a ggraph plot with the custom layout
ggraph(g, layout = layout_matrix) +
geom_edge_link(aes(start_cap = label_rect(node1.name), end_cap = label_rect(node2.name)),
arrow = arrow(length = unit(2, 'mm')), end_cap = circle(6, 'mm')) +  # Arrow length is halved to 2mm
geom_node_point(aes(size = size), color = "lightblue") +
geom_node_text(aes(label = name), vjust = 1.8, hjust = 1.5, color = "black") +
theme_void() +
scale_size_continuous(range = c(5, 30)) +  # Adjust the range of bubble sizes to fit the smaller scale
theme(plot.margin = unit(c(1, 1, 1, 1), "cm"))  # Further increase margins to ensure everything fits
library(igraph)
library(ggraph)
library(ggplot2)
# Define the interactions
interactions <- data.frame(
prey = c("Algae", "Plankton", "Herbivores", "FilterFeeders"),
predator = c("Herbivores", "FilterFeeders", "Predators", "Predators")
)
# Create a directed graph from the interaction data
g <- graph_from_data_frame(interactions, directed = TRUE)
# Assign specific sizes to each node and scale them down
scale_factor <- 0.8  # Scaling factor for node sizes, reduced for better fitting
node_sizes <- c(Algae = 95, Herbivores = 11, Predators = 31, Plankton = 100, FilterFeeders = 52) * scale_factor
# Match sizes to the vertices in the graph
V(g)$size <- node_sizes[V(g)$name]
# Define custom layout positions for the "V" shape, making the nodes closer but more centralized
layout_matrix <- matrix(c(
0, 1.5,  # Predators at the top (apex), adjusted closer to the center
-0.4, 1,  # Herbivores on the left, adjusted
0.4, 1,   # Filter Feeders on the right, adjusted
-0.6, 0.5, # Algae at the bottom left, adjusted
0.6, 0.5   # Plankton at the bottom right, adjusted
), ncol = 2, byrow = TRUE)
# Reorder the layout matrix to match the order of nodes
layout_matrix <- layout_matrix[match(V(g)$name, c("Predators", "Herbivores", "FilterFeeders", "Algae", "Plankton")), ]
# Create a ggraph plot with the custom layout
ggraph(g, layout = layout_matrix) +
geom_edge_link(aes(start_cap = label_rect(node1.name), end_cap = label_rect(node2.name)),
arrow = arrow(length = unit(2, 'mm')), end_cap = circle(6, 'mm')) +  # Arrow length is halved to 2mm
geom_node_point(aes(size = size), color = "lightblue") +
geom_node_text(aes(label = name), vjust = 1.8, hjust = 1.5, color = "black") +
theme_void() +
scale_size_continuous(range = c(5, 25)) +  # Adjust the range of bubble sizes to fit the smaller scale
theme(plot.margin = unit(c(1, 1, 1, 1), "cm"))  # Further increase margins to ensure everything fits
library(gt)
numbers <- c("Step 1","Step 2","Step 3","Step 4","Step 5","Step 6","Step 7","Step 8")
steps <- c("Create draft codebook using a priori codes and emergent themes from interviews.","Iteratively code three transcripts to refine and revise the codebook.","Independently code two new transcripts and run IRR.","Independently code remaining interviews.","Meet to discuss any discrepancies.","Recode all transcripts if any codes are revised or added.","Run IRR on recoded transcripts with final codebook")
chp1coding <- as.data.frame(numbers, steps)
chp1coding <- data.frame(numbers =c("Step 1","Step 2","Step 3","Step 4","Step 5","Step 6","Step 7","Step 8"),steps = c("Create draft codebook using a priori codes and emergent themes from interviews.","Iteratively code three transcripts to refine and revise the codebook.","Independently code two new transcripts and run IRR.","Independently code remaining interviews.","Meet to discuss any discrepancies.","Recode all transcripts if any codes are revised or added.","Run IRR on recoded transcripts with final codebook.") )
chp1coding <- data.frame(numbers =c("Step 1","Step 2","Step 3","Step 4","Step 5","Step 6","Step 7","Step 8"),steps = c("Create draft codebook using a priori codes and emergent themes from interviews.","Iteratively code three transcripts to refine and revise the codebook.","Independently code two new transcripts and run IRR.","Independently code remaining interviews.","Run IRR on remaining transcripts.","Meet to discuss any discrepancies.","Recode all transcripts if any codes are revised or added.","Run IRR on recoded transcripts with final codebook.") )
chp1coding <- data.frame(numbers =c("Step 1","Step 2","Step 3","Step 4","Step 5","Step 6","Step 7","Step 8"),steps = c(
"Create draft codebook using a priori codes and emergent themes from interviews.",      "Iteratively code three transcripts to refine and revise the codebook.",
"Independently code two new transcripts and run IRR.",
"Independently code remaining interviews.",
"Run IRR on remaining transcripts.",
"Meet to discuss any discrepancies.",
"Recode all transcripts if any codes are revised or added.",
"Run IRR on recoded transcripts with final codebook.") )
?gt
library(gt)
setwd("/Users/faithfrings/Documents/R Projects")
?gt
chp1coding <- data.frame(numbers =c("Step 1","Step 2","Step 3","Step 4","Step 5","Step 6","Step 7","Step 8"),steps = c(
"Create draft codebook using a priori codes and emergent themes from interviews.",      "Iteratively code three transcripts to refine and revise the codebook.",
"Independently code two new transcripts and run IRR.",
"Independently code remaining interviews.",
"Run IRR on remaining transcripts.",
"Meet to discuss any discrepancies.",
"Recode all transcripts if any codes are revised or added.",
"Run IRR on recoded transcripts with final codebook.") ) %>%
gt() %>%
cols_label(
numbers = "",
steps = "**Protocol Steps**"
)
chp1coding <- data.frame(numbers =c("Step 1","Step 2","Step 3","Step 4","Step 5","Step 6","Step 7","Step 8"),steps = c(
"Create draft codebook using a priori codes and emergent themes from interviews.",      "Iteratively code three transcripts to refine and revise the codebook.",
"Independently code two new transcripts and run IRR.",
"Independently code remaining interviews.",
"Run IRR on remaining transcripts.",
"Meet to discuss any discrepancies.",
"Recode all transcripts if any codes are revised or added.",
"Run IRR on recoded transcripts with final codebook.") )
table <- chp1coding %>%
gt()
cols_label(
numbers = "",
steps = "**Protocol Steps**"
)
table <- chp1coding %>%
gt() %>%
cols_label(
numbers = "",
steps = "**Protocol Steps**"
)
print(table)
chp1coding <- data.frame(numbers =c("Step 1","Step 2","Step 3","Step 4","Step 5","Step 6","Step 7","Step 8"),steps = c(
"Create draft codebook using a priori codes and emergent themes from interviews.",      "Iteratively code three transcripts to refine and revise the codebook.",
"Independently code two new transcripts and run IRR.",
"Independently code remaining interviews.",
"Run IRR on remaining transcripts.",
"Meet to discuss any discrepancies.",
"Recode all transcripts if any codes are revised or added.",
"Run IRR on recoded transcripts with final codebook.") )
chp1coding %>%
gt() %>%
cols_label(
numbers = "",
steps = "Protocol Steps"
)
install.packages("readxl")
install.packages("openxlsx")
library(readxl)
setwd("/Users/faithfrings/Documents/R Projects/website")
RandomNum <- runif(8, 1, 8)
RandomNum
random_number <- sample(1:8, 1)
print(random_number)
print(random_number)
print(random_number)
print(random_number)
print(random_number)
print(random_number)
print(random_number)
random_number <- sample(1:8, 1)
print(random_number)
random_number <- sample(1:8, 1)
print(random_number)
