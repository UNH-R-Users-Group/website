Date_Time = make_datetime(year = X.YY , month = MM, day = DD, hour = hh, min = mm))
?Sys.time
greatbay <- greatbay %>%
mutate(Date_Time = with_tz(Date_Time, tzone = "EST")
)
View(greatbay)
#Check the timezone
tz(greatbay$Date_Time)
greatbay <- greatbay %>%
mutate(time_difference = difftime(Sys.time(), Date_Time, units = "secs")) #creates a new column with the difference between the current time (Sys.time()) and the Date_Time column in seconds.
View(greatbay)
?difftime
greatbay <- greatbay %>%
mutate(time_difference = difftime(Sys.time(), Date_Time, units = "mins")) #creates a new column with the difference between the current time (Sys.time()) and the Date_Time column in seconds.
View(greatbay)
library(ggplot2)
colnames(greatbay)
ggplot(data = greatbay,
mapping = aes(x = Date_Time, y = ATMP))+
geom_point()+
geom_line()+
theme_bw()
ggplot(data = greatbay,
mapping = aes(x = Date_Time, y = ATMP))+
geom_point()+
geom_line()
?geom_point
ggplot(data = greatbay,
mapping = aes(x = Date_Time, y = ATMP))+
geom_point(aes(size = 0.5))+
geom_line()
ggplot(data = greatbay,
mapping = aes(x = Date_Time, y = ATMP))+
geom_point(aes(size = 0.03))+
geom_line()
ggplot(data = greatbay,
mapping = aes(x = Date_Time, y = ATMP))+
geom_point()+
geom_line()
ggplot(data = greatbay,
mapping = aes(x = Date_Time, y = ATMP))+
geom_point(aes(size = 1))+
geom_line()
ggplot(data = greatbay,
mapping = aes(x = Date_Time, y = ATMP))+
geom_point(aes(size = .6))+
geom_line()
ggplot(data = greatbay,
mapping = aes(x = Date_Time, y = ATMP))+
geom_point(aes(size = .06))+
geom_line()
ggplot(data = greatbay,
mapping = aes(x = Date_Time, y = ATMP))+
geom_point(size = 0.5)+#didn't use aes()bc aes is treating size as a data variable, not a fixed value. Use size = outside of aes to apply a fix size to all points
geom_line()
View(greatbay)
print(greatbay)
str(greatbay)
# Group by day and calculate the daily average ATMP
daily_avg <- greatbay %>%
group_by(day = as.Date(Date_Time)) %>%  # Extract the date part only
summarise(avg_ATMP = mean(ATMP, na.rm = TRUE))  # Calculate the mean ATMP per day
# Plot the daily average ATMP over time
ggplot(daily_avg, aes(x = day, y = avg_ATMP)) +
geom_line() +
geom_point() +
labs(x = "Date", y = "Average ATMP (°C)", title = "Daily Average ATMP Over Time") +
theme_minimal()
library(palmerpenguins)
library(tidyverse)
library(kableExtra)
data(penguins)
penguins_noNA <- penguins %>%
drop_na()
library(kableExtra)
Penguins_summary <- penguins_noNA %>%
group_by(species,island) %>%
summarise(mean(flipper_length_mm),sd(flipper_length_mm,)) %>%
ungroup() %>%
kable(col.names = c("Species", "Island", "Mean Flipper length (mm)", "SD Flipper Length (mm)"),
caption = "Summary of Mean and SD of flipper length") %>%
kable_styling() %>%
kable_classic()
print(Penguins_summary)
penguinsNO_NA <- penguins %>%
na.omit(penguinsNO_NA)
penguinsA <- penguinsNO_NA %>%
filter(species == 'Adelie')
ggplot(data = penguinsA,
mapping = aes(x=year, y= body_mass_g, color=sex)) +
geom_boxplot() +
ggtitle('Body Mass (g) for Adelie Penguins')+
xlab('Year') + ylab ('Body Mass (g)') +
theme_minimal()
ggplot(data = penguinsA,
mapping = aes(x=year, y= body_mass_g)) +
geom_boxplot() +
ggtitle('Body Mass (g) for Adelie Penguins')+
xlab('Year') + ylab ('Body Mass (g)') +
theme_minimal()
View(penguinsA)
ggplot(data = penguinsA,
mapping = aes(x=as.factor(year), y= body_mass_g)) +
geom_boxplot() +
ggtitle('Body Mass (g) for Adelie Penguins')+
xlab('Year') + ylab ('Body Mass (g)') +
theme_minimal()
library(palmerpenguins)
data("penguins")
penguins_noNA <- penguins %>%
drop_na()
library(tidyverse)
penguins_noNA <- penguins %>%
drop_na()
ggplot(data = penguins_noNA,
mapping = aes(x = body_mass_g , y = flipper_length_mm))+
geom_smooth(method = 'lm')
ggplot(data = penguins_noNA,
mapping = aes(x = body_mass_g , y = flipper_length_mm))+
geom_point()+
geom_smooth(method = 'lm')
#LOAD PACKAGES
library(tidyverse)
#LOAD DATA
library(palmerpenguins)
data(penguins)
penguins_noNA <- penguins %>%
drop_na()
library(kableExtra)
?kableExtra
penguins_noNA_KABLE <- penguins_noNA %>%
group_by(species, island) %>%
summarise(mean(flipper_length_mm), sd(flipper_length_mm))
kable(penguins_noNA_KABLE, caption = "Flipper Length Per Species and Island") %>%
kable_classic(full_width = F, html_font = "Times New Roman")
Adelie_Box <- penguins_noNA %>%
filter(species == "Adelie")
ggplot(data = Adelie_Box, mapping = aes(x = year, y = body_mass_g, group = year)) +
geom_boxplot()
ggplot(data = penguins_noNA, mapping = aes(x = bill_length_mm, y = bill_depth_mm, color = species, shape = sex)) +
geom_point()
ggplot(data = penguins_noNA, mapping = aes(x = body_mass_g, y = flipper_length_mm, color = species, shape = sex)) +
geom_point() +
geom_smooth(method = lm)
?geom_smooth
ggplot(data = penguins_noNA, mapping = aes(x = body_mass_g, y = flipper_length_mm, color = species, shape = sex)) +
geom_point() +
geom_smooth(method = lm) +
facet_wrap(~species, scales = 'free_y')
ggplot(data = penguins_noNA, mapping = aes(x = body_mass_g, y = bill_depth_mm, color = species, shape = sex)) +
geom_point(alpha = 0.5) +
xlab("Body Mass in g") +
ylab("Bill Depth in mm") +
ggtitle("Body Mass and Bill Depth Comparison Per Island") +
theme(plot.title = element_text(hjust = 0.5, color = " dark blue")) +
theme_test()+
geom_smooth(method = lm, fill = "grey") +
facet_wrap(~island, scales = 'free_y')
library(tidyverse)
chic <- readr::read_csv("https://cedricscherer.com/data/chicago-nmmaps-custom.csv")
View(chic)
str(chic)
g <- ggplot(data = chic,
aes(x = date, y = temp))
ggplot(data = chic,
aes(x = date, y = temp))
#creating only the panel
(g <- ggplot(data = chic,
aes(x = date, y = temp)))
#putting object in parentheses so it runs immediately
(g <- ggplot(data = chic,
aes(x = date, y = temp))+
geom_point()+ #adds point layer to plot
geom_line())#adds line layer
(g <- ggplot(data = chic,
aes(x = date, y = temp))+
geom_point(color = "firebrick", shape = "diamond", size = 2)) #adds point layer to plot
theme_set(theme_bw())
g + geom_point(color = "firebrick")
(g <- ggplot(data = chic,
aes(x = date, y = temp))+
geom_point(color = "firebrick", shape = "diamond", size = 2)+
labs(x = "Year", y = "Temperature (°F)"))
(g <- ggplot(data = chic,
aes(x = date, y = temp))+
geom_point(color = "firebrick", shape = "diamond", size = 2)+
labs(x = "Year", y = "Temperature (°F)")+
theme(axis.title.x = element_text(vjust = 0, size = 15),
axis.title.y = element_text(vjust = 2, size = 15)))
#margin(t, r, b, l)
#A good way to remember the order of the margin sides is “t-r-ou-b-l-e”.
ggplot(chic, aes(x = date, y = temp)) +
geom_point(color = "firebrick") +
labs(x = "Year", y = "Temperature (°F)") +
theme(axis.title.x = element_text(margin = margin(t = 10), size = 15),
axis.title.y = element_text(margin = margin(r = 10), size = 15))
ggplot(chic, aes(x = date, y = temp)) +
geom_point(color = "firebrick") +
labs(x = "Year", y = "Temperature (°F)") +
theme(axis.title = element_text(size = 15, color ="deepskyblue",
face = "italic"))
ggplot(chic, aes(x = date, y = temp)) +
geom_point(color = "firebrick") +
labs(x = "Year", y = "Temperature (°F)") +
theme(axis.title = element_text(size = 15, color ="deepskyblue",
face = "italic",
axis.text = element_text(color = "forestgreen", size = 12),
axis.text.x = element_text(face = "italic")))
ggplot(chic, aes(x = date, y = temp)) +
geom_point(color = "firebrick") +
labs(x = "Year", y = "Temperature (°F)") +
theme(axis.title = element_text(color = "deepskyblue",size = 15, face = "bold"),
axis.text = element_text(color = "forestgreen", size = 12),
axis.text.x = element_text(face = "italic"))
ggplot(chic, aes(x = date, y = temp)) +
geom_point(color = "firebrick") +
labs(x = "Year", y = "Temperature (°F)") +
theme(axis.title = element_text(color = "deepskyblue",size = 15, face = "bold"),
axis.text = element_text(color = "forestgreen", size = 12),
axis.text.x = element_text(angle = 50, face = "italic"))#specifying angle
ggplot(chic, aes(x = date, y = temp)) +
geom_point(color = "firebrick") +
labs(x = "Year", y = "Temperature (°F)") +
theme(axis.title = element_text(color = "deepskyblue",size = 15, face = "bold"),
axis.text = element_text(color = "forestgreen", size = 12),
axis.text.x = element_text(angle = 50, vjust = 1, face = "italic"))#specifying angle
ggplot(chic, aes(x = date, y = temp)) +
geom_point(color = "firebrick") +
labs(x = "Year", y = "Temperature (°F)") +
theme(axis.title = element_text(color = "deepskyblue",size = 15, face = "bold"),
axis.text = element_text(color = "forestgreen", size = 12),
axis.text.x = element_text(angle = 50, vjust = 1, hjust = 1, face = "italic"))#specifying angle
ggplot(chic, aes(x = date, y = temp)) +
geom_point(color = "firebrick") +
labs(x = "Year", y = "Temperature (°F)") +
theme(axis.title = element_text(color = "deepskyblue",size = 15, face = "bold"),
axis.text = element_text(color = "forestgreen", size = 12),
axis.text.x = element_text(angle = 50, vjust = 1, hjust = 1, size = 12, face = "italic"))#specifying angle
ggplot(chic, aes(x = date, y = temp)) +
geom_point(color = "firebrick") +
labs(x = "Year", y = "Temperature (°F)") +
theme(axis.ticks.y = element_blank(),
axis.text.y = element_blank())
ggplot(chic, aes(x = date, y = temp)) +
geom_point(color = "firebrick") +
labs(x = "Year", y = "Temperature (°F)") +
theme(axis.ticks.y = element_blank(),
axis.text.y = element_blank())#element_blank removes the element
ggplot(chic, aes(x = date, y = temp)) +
geom_point(color = "firebrick") +
labs(x = "Year", y = "Temperature (°F)") +
theme(axis.ticks.y = element_blank(),
axis.text.x = element_blank())#element_blank removes the element
ggplot(chic, aes(x = date, y = temp)) +
geom_point(color = "firebrick") +
labs(x = "Year", y = "Temperature (°F)") +
theme(axis.ticks.y = element_blank(),
axis.ticks.x = element_blank())#element_blank removes the element
ggplot(chic, aes(x = date, y = temp)) +
geom_point(color = "firebrick") +
labs(x = "Year", y = "Temperature (°F)") +
ylim(c(0, 50))
chic_high <- dplyr::filter(chic, temp > 25, o3 > 20)
ggplot(chic_high, aes(x = temp, y = o3)) +
geom_point(color = "darkcyan") +
labs(x = "Temperature higher than 25°F",
y = "Ozone higher than 20 ppb") +
expand_limits(x = 0, y = 0)
ggplot(chic_high, aes(x = temp, y = o3)) +
geom_point(color = "darkcyan") +
labs(x = "Temperature higher than 25°F",
y = "Ozone higher than 20 ppb") +
expand_limits(x = 0, y = 0) +
coord_cartesian(expand = FALSE, clip = "off") #using clip = "off" to draw outside of plot area
ggplot(chic, aes(x = temp, y = temp + rnorm(nrow(chic), sd = 20))) +
geom_point(color = "sienna") +
labs(x = "Temperature (°F)", y = "Temperature (°F) + random noise") +
xlim(c(0, 100)) + ylim(c(0, 150)) +
coord_fixed(ratio = 1/5)#ratios higher than 1 make y longer, and vice versa
ggplot(chic, aes(x = date, y = temp)) +
geom_point(color = "firebrick") +
labs(x = "Year", y = NULL) +
scale_y_continuous(label = function(x) {return(paste(x, "°F"))}) #use funtion to alter all parts of y label
(g <- ggplot(chic, aes(x = date, y = temp)) +
geom_point(color = "firebrick") +
scale_y_continuous(label = function(x) {return(paste(x, "Degrees Fahrenheit"))}) +
labs(x = "Year", y = NULL,
caption = "Figure 1. Temperatures in Chicago betwen 1997 and 2001 in degrees fahrenheit.") +
theme(plot.title = element_text(size = 14, face = "bold.italic"),
plot.caption = element_text(hjust = 0)))
ggplot(chic,
aes(x = date, y = temp, color = season)) +
geom_point() +
labs(x = "Year", y = "Temperature (°F)")
#turning off legend
ggplot(chic,
aes(x = date, y = temp, color = season)) +
geom_point() +
labs(x = "Year", y = "Temperature (°F)") +
theme(legend.position = "none")#turns off legend
#removing legend title
ggplot(chic, aes(x = date, y = temp, color = season)) +
geom_point() +
labs(x = "Year", y = "Temperature (°F)") +
theme(legend.title = element_blank())
#changing legend position
ggplot(chic, aes(x = date, y = temp, color = season)) +
geom_point() +
labs(x = "Year", y = "Temperature (°F)") +
theme(legend.position = "top")
ggplot(chic, aes(x = date, y = temp, color = season)) +
geom_point() +
labs(x = "Year", y = "Temperature (°F)",
color = NULL) +
theme(legend.position = c(.15, .15),
legend.background = element_rect(fill = "transparent"))
#change legend direction
ggplot(chic, aes(x = date, y = temp, color = season)) +
geom_point() +
labs(x = "Year", y = "Temperature (°F)") +
theme(legend.position = c(.5, .97),
legend.background = element_rect(fill = "transparent")) +
guides(color = guide_legend(direction = "horizontal"))
#changing appearance of legend title
ggplot(chic, aes(x = date, y = temp, color = season)) +
geom_point() +
labs(x = "Year", y = "Temperature (°F)") +
theme(legend.title = element_text(family = "Playfair",
color = "chocolate",
size = 14, face = "bold"))
#changing appearance of legend title
ggplot(chic, aes(x = date, y = temp, color = season)) +
geom_point() +
labs(x = "Year", y = "Temperature (°F)") +
theme(legend.title = element_text(family = "Playfair",
color = "chocolate",
size = 14, face = "bold"))
ggplot(chic, aes(x = date, y = temp, color = season)) +
geom_point() +
labs(x = "Year", y = "Temperature (°F)",
color = "Seasons\nindicated\nby colors:") +
theme(legend.title = element_text(
color = "chocolate",
size = 14, face = "bold"))
ggplot(chic, aes(x = date, y = temp, color = season)) +
geom_point() +
labs(x = "Year", y = "Temperature (°F)")
#changing legend labels
ggplot(chic, aes(x = date, y = temp, color = season)) +
geom_point() +
labs(x = "Year", y = "Temperature (°F)") +
scale_color_discrete(
name = "Seasons:",
labels = c("Mar—May", "Jun—Aug", "Sep—Nov", "Dec—Feb")
) +
theme(legend.title = element_text(
family = "Playfair", color = "chocolate", size = 14, face = 2
))
#changing legend labels
ggplot(chic, aes(x = date, y = temp, color = season)) +
geom_point() +
labs(x = "Year", y = "Temperature (°F)") +
scale_color_discrete(
name = "Seasons:",
labels = c("Mar—May", "Jun—Aug", "Sep—Nov", "Dec—Feb")
) +
theme(legend.title = element_text(
color = "chocolate", size = 14, face = 2
))
#changing size of legend symbols
ggplot(chic, aes(x = date, y = temp, color = season)) +
geom_point() +
labs(x = "Year", y = "Temperature (°F)") +
theme(legend.key = element_rect(fill = NA),
legend.title = element_text(color = "chocolate",
size = 14, face = 2)) +
scale_color_discrete("Seasons:") +
guides(color = guide_legend(override.aes = list(size = 6)))
#defualt plot
ggplot(chic, aes(x = date, y = o3)) +
geom_line(color = "gray") +
geom_point(color = "darkorange2") +
labs(x = "Year", y = "Ozone")
#forcing a legend by mapping a guide to a variable. Using aes to map not to a variable in the data set, but to a single string (so that we can get just one color for each)
ggplot(chic, aes(x = date, y = o3)) +
geom_line(aes(color = "line")) +
geom_point(aes(color = "points")) +
labs(x = "Year", y = "Ozone") +
scale_color_discrete("Type:")
#forcing a legend by mapping a guide to a variable. Using aes to map not to a variable in the data set, but to a single string (so that we can get just one color for each)
ggplot(chic, aes(x = date, y = o3)) +
geom_line(aes(color = "line")) +
geom_point(aes(color = "points")) +
labs(x = "Year", y = "Ozone")# +
#forcing a legend by mapping a guide to a variable. Using aes to map not to a variable in the data set, but to a single string (so that we can get just one color for each)
ggplot(chic, aes(x = date, y = o3)) +
geom_line(aes(color = "line")) +
geom_point(aes(color = "points")) +
labs(x = "Year", y = "Ozone") +
scale_color_discrete("Type:")
#forcing a legend by mapping a guide to a variable. Using aes to map not to a variable in the data set, but to a single string (so that we can get just one color for each)
ggplot(chic, aes(x = date, y = o3)) +
geom_line(aes(color = "line")) +
geom_point(aes(color = "points")) +
labs(x = "Year", y = "Ozone") +
scale_color_manual(name = NULL,
guide = "legend",
values = c("points" = "darkorange2",
"line" = "gray")) +
guides(color = guide_legend(override.aes = list(linetype = c(1, 0),
shape = c(NA, 16))))
#other legend styles
ggplot(chic,
aes(x = date, y = temp, color = temp)) +
geom_point() +
labs(x = "Year", y = "Temperature (°F)", color = "Temperature (°F)")
#LOAD PACKAGES
library(tidyverse)
library(lubridate)
library(ggplot2)
# LOAD DATA. You can  read about the descriptions of the columns here: https://www.ndbc.noaa.gov/station_realtime.php?station=bgxn3
# Data from National Estuarine Research Reserve System (43.059 N 70.830 W 43°3'32" N 70°49'49" W)
download.file(url='https://www.ndbc.noaa.gov/data/realtime2/BGXN3.txt',
destfile = 'greatbay.txt')
write.csv(x = read.csv(file = 'greatbay.txt', header = TRUE, sep='')[-1,],file = 'greatbay.txt', quote=FALSE, row.names = FALSE)
greatbay <- read.csv(file = 'greatbay.txt', header = TRUE)
greatbay <- greatbay %>%
mutate(
Date_Time = make_datetime(year = X.YY , month = MM, day = DD, hour = hh, min = mm))
greatbay <- greatbay %>%
mutate(Date_Time = with_tz(Date_Time, tzone = "EST"))
#Check the timezone
tz(greatbay$Date_Time)
greatbay <- greatbay %>%
mutate(time_difference = difftime(Sys.time(), Date_Time, units = "mins")) #creates a new column with the difference between the current time (Sys.time()) and the Date_Time column in minutes.
str(greatbay)
View(greatbay)
# Group by day and calculate the daily average ATMP
daily_avg <- greatbay %>%
group_by(day = as.Date(Date_Time)) %>%  # Extract the date part only
summarise(avg_ATMP = mean(ATMP, na.rm = TRUE))  # Calculate the mean ATMP per day
View(daily_avg)
library(tidyverse)
# Example data frame
df <- data.frame(
date = c("09/29/24", "09/29/24", "09/29/24", "09/29/24", "09/30/24", "09/30/24", "09/30/24", "09/30/24"),
total_count = c(10, 15, 20, 25, 5, 10, 15, 20)
)
# Convert date to Date format and calculate average total_count for each date
df_avg <- df %>%
mutate(date = as.Date(date, format = "%m/%d/%y")) %>%
group_by(date) %>%
summarise(avg_total_count = mean(total_count))
# View the resulting data frame
df_avg
str(df)
ggplot(chic, aes(x = date, y = temp)) +
geom_point(color = "#1D8565", size = 2) +
labs(x = "Year", y = "Temperature (°F)") +
theme(panel.background = element_rect(
fill = "#64D2AA", color = "#64D2AA", linewidth = 2)
)
library(ggplot2)
library(xlsx)
install.packages("xlsx")
library(xlsx)
library(ggplot2)
library(RColorBrewer)
library(extrafont)
library(cowplot)
library(gridExtra)
#LOAD PACKAGES
library(tidyverse)
library(lubridate)
library(ggplot2)
# LOAD DATA. You can  read about the descriptions of the columns here: https://www.ndbc.noaa.gov/station_realtime.php?station=bgxn3
# Data from National Estuarine Research Reserve System (43.059 N 70.830 W 43°3'32" N 70°49'49" W)
download.file(url='https://www.ndbc.noaa.gov/data/realtime2/BGXN3.txt',
destfile = 'greatbay.txt')
write.csv(x = read.csv(file = 'greatbay.txt', header = TRUE, sep='')[-1,],file = 'greatbay.txt', quote=FALSE, row.names = FALSE)
greatbay <- read.csv(file = 'greatbay.txt', header = TRUE)
greatbay <- greatbay %>%
mutate(
Date_Time = make_datetime(year = X.YY , month = MM, day = DD, hour = hh, min = mm))
View(greatbay)
?as.Date
greatbayslash <- greatbay %>%
mutate(
Date_time_slash = as.Date(Date_Time, format = "%d/%m/%y")
)
View(greatbayslash)
date <- now() #making object of today's date
#for months & weekdays, we can specify if we want to extract the numerical value of that element
month(date)#will return the numerical value
month(date, label = TRUE)#will return the label of the month (e.g., March)
setwd("~/Documents/R Projects")
setwd("~/Documents/R Projects/website")
setwd("~/Documents/R Projects/website/qmdfiles")
setwd("~/Documents/R Projects/website")
setwd("~/Documents/R Projects/website")
setwd("~/Documents/R_Projects/website")
library(palmerpenguins)
plot(penguins$bill_length_mm, penguins$bill_depth_mm)
library(ggplot2)
library(ggplot2)
library(ggplot2)
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm)) +
geom_point()
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
geom_point()
0.5-0.4990
0.5-0.2258
